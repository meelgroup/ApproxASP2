{ in(X,Y) : edge(X,Y) } = 1 :- node(Y), not first(Y).

first(X) :- X = #min { Y: node(Y) }.

connected(1, Y) :- in(1, Y).
connected(X, Y) :- connected(X, Z), in(Z, Y).

:- node(Y), first(X), X != Y, not connected(X, Y).
#show in/2.
% Nodes
node(1..6).
% (Directed) Edges
edge(1,(2;3;4)).  edge(2,(4;5;6)).  edge(3,(1;4;5)).
edge(4,(1;2)).    edge(5,(3;4;6)).  edge(6,(2;3;5)).
__parity(0, odd). __parity(0, odd, in(2,5)) :- in(2,5). __parity(0, odd, in(4,2)) :- in(4,2). __parity(0, odd, in(6,2)) :- in(6,2). __parity(0, odd, in(5,6)) :- in(5,6). __parity(0, odd, connected(1,3)) :- connected(1,3). __parity(0, odd, in(6,3)) :- in(6,3). __parity(0, odd, in(1,4)) :- in(1,4). __parity(0, odd, connected(1,6)) :- connected(1,6). __parity(0, odd, in(3,4)) :- in(3,4). __parity(0, odd, connected(1,2)) :- connected(1,2). __parity(1, even). __parity(1, even, connected(1,2)) :- connected(1,2). __parity(1, even, in(5,6)) :- in(5,6). __parity(1, even, in(6,2)) :- in(6,2). __parity(1, even, in(1,3)) :- in(1,3). __parity(1, even, connected(1,3)) :- connected(1,3). __parity(1, even, in(6,3)) :- in(6,3). __parity(1, even, in(2,5)) :- in(2,5). __parity(1, even, in(2,4)) :- in(2,4). __parity(1, even, connected(1,6)) :- connected(1,6). __parity(1, even, in(5,4)) :- in(5,4). __parity(2, odd). __parity(2, odd, in(2,6)) :- in(2,6). __parity(2, odd, in(3,5)) :- in(3,5). __parity(2, odd, in(2,5)) :- in(2,5). __parity(2, odd, connected(1,6)) :- connected(1,6). __parity(2, odd, in(5,3)) :- in(5,3). __parity(2, odd, connected(1,5)) :- connected(1,5). __parity(2, odd, in(1,4)) :- in(1,4). __parity(2, odd, connected(1,3)) :- connected(1,3). __parity(2, odd, in(6,5)) :- in(6,5). __parity(2, odd, in(5,4)) :- in(5,4). 
:- { __parity(ID,even,X) } = N, N\2!=0, __parity(ID,even).              :- { __parity(ID,odd ,X) } = N, N\2!=1, __parity(ID,odd).
